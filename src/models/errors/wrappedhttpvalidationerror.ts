/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as components from "../components/index.js";

export type WrappedHTTPValidationErrorData = {
  object?: string | undefined;
  message?: components.HTTPValidationError | undefined;
  type?: string | undefined;
  param?: string | null | undefined;
  code?: string | null | undefined;
};

export class WrappedHTTPValidationError extends Error {
  object?: string | undefined;
  type?: string | undefined;
  param?: string | null | undefined;
  code?: string | null | undefined;

  /** The original data that was passed to this error instance. */
  data$: WrappedHTTPValidationErrorData;

  constructor(err: WrappedHTTPValidationErrorData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    if (err.object != null) this.object = err.object;
    if (err.type != null) this.type = err.type;
    if (err.param != null) this.param = err.param;
    if (err.code != null) this.code = err.code;

    this.name = "WrappedHTTPValidationError";
  }
}

/** @internal */
export const WrappedHTTPValidationError$inboundSchema: z.ZodType<
  WrappedHTTPValidationError,
  z.ZodTypeDef,
  unknown
> = z.object({
  object: z.string().optional(),
  message: components.HTTPValidationError$inboundSchema.optional(),
  type: z.string().optional(),
  param: z.nullable(z.string()).optional(),
  code: z.nullable(z.string()).optional(),
})
  .transform((v) => {
    return new WrappedHTTPValidationError(v);
  });

/** @internal */
export type WrappedHTTPValidationError$Outbound = {
  object?: string | undefined;
  message?: components.HTTPValidationError$Outbound | undefined;
  type?: string | undefined;
  param?: string | null | undefined;
  code?: string | null | undefined;
};

/** @internal */
export const WrappedHTTPValidationError$outboundSchema: z.ZodType<
  WrappedHTTPValidationError$Outbound,
  z.ZodTypeDef,
  WrappedHTTPValidationError
> = z.instanceof(WrappedHTTPValidationError)
  .transform(v => v.data$)
  .pipe(z.object({
    object: z.string().optional(),
    message: components.HTTPValidationError$outboundSchema.optional(),
    type: z.string().optional(),
    param: z.nullable(z.string()).optional(),
    code: z.nullable(z.string()).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WrappedHTTPValidationError$ {
  /** @deprecated use `WrappedHTTPValidationError$inboundSchema` instead. */
  export const inboundSchema = WrappedHTTPValidationError$inboundSchema;
  /** @deprecated use `WrappedHTTPValidationError$outboundSchema` instead. */
  export const outboundSchema = WrappedHTTPValidationError$outboundSchema;
  /** @deprecated use `WrappedHTTPValidationError$Outbound` instead. */
  export type Outbound = WrappedHTTPValidationError$Outbound;
}
